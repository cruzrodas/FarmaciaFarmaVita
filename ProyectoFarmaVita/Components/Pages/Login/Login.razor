@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using ProyectoFarmaVita.Models
@using ProyectoFarmaVita.Services.LoginServices
@inject ILoginService LoginService
@inject NavigationManager NavigationManager
@inject ILogger<Login> logger
@inject ISnackbar Snackbar
@inject CustomAuthenticationStateProvider customAuthenticationStateProvider
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<PageTitle>FarmaVita - Iniciar Sesión</PageTitle>

@if (!isUserAuthenticated)
{
    <div class="login-page-container">
        <div class="login-form-container">
            <div class="login-background">
                <div class="content-wrapper">
                    <div class="welcome-side">
                        <!-- CONTENIDO DE BIENVENIDA -->
                    </div>
                    <div class="login-side">
                        <div class="login-form">
                            <h2>Iniciar Sesión</h2>
                            <p class="login-subtitle">Accede a tu cuenta del sistema</p>

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
                            }

                            <EditForm Model="@credencialesUsuario" OnValidSubmit="@HandleLogin">
                                <DataAnnotationsValidator />

                                <MudTextField Label="Correo Electrónico"
                                              @bind-Value="credencialesUsuario.Email"
                                              For="@(() => credencialesUsuario.Email)"
                                              Required="true"
                                              Variant="Variant.Outlined"
                                              FullWidth="true"
                                              Class="mb-3"
                                              Adornment="Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.Email"
                                              Disabled="@isLoading" />

                                <MudTextField Label="Contraseña"
                                              @bind-Value="credencialesUsuario.Password"
                                              For="@(() => credencialesUsuario.Password)"
                                              InputType="@passwordInput"
                                              Required="true"
                                              Variant="Variant.Outlined"
                                              FullWidth="true"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@(passwordVisible? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                              OnAdornmentClick="PasswordVisibility"
                                              Disabled="@isLoading" />

                                <MudButton ButtonType="ButtonType.Submit"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           FullWidth="true"
                                           Size="Size.Large"
                                           Class="iniciar-sesion-button mt-4"
                                           Disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                        <span class="ml-2">Iniciando sesión...</span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sign-in-alt mr-2"></i>
                                        <span>Iniciar Sesión</span>
                                    }
                                </MudButton>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private CredencialesUsuario credencialesUsuario = new CredencialesUsuario();
    private string errorMessage = string.Empty;
    private bool passwordVisible = false;
    private InputType passwordInput = InputType.Password;
    private bool isLoading = false;
    private bool isUserAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("🚀 Login - OnInitializedAsync iniciado");

            // Verificar si el usuario ya está autenticado
            var authState = await customAuthenticationStateProvider.GetAuthenticationStateAsync();
            isUserAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;

            Console.WriteLine($"🔍 Estado inicial de autenticación: {isUserAuthenticated}");

            // Solo redirigir si estamos en /login y el usuario ya tiene sesión
            if (isUserAuthenticated && NavigationManager.Uri.EndsWith("/login", StringComparison.OrdinalIgnoreCase))
            {
                Console.WriteLine("✅ Usuario ya autenticado, redirigiendo a inicio...");
                NavigationManager.NavigateTo("/", replace: true);
                return;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error inicializando login component");
            Console.WriteLine($"❌ Error en OnInitializedAsync: {ex.Message}");
        }
    }

    private void PasswordVisibility()
    {
        passwordVisible = !passwordVisible;
        passwordInput = passwordVisible ? InputType.Text : InputType.Password;
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            Console.WriteLine("🚀 Iniciando proceso de login...");

            var respuestaAutenticacion = await LoginService.Login(credencialesUsuario);

            if (!string.IsNullOrEmpty(respuestaAutenticacion.Token))
            {
                Console.WriteLine("✅ Login exitoso, guardando token...");

                // Guardar token
                await customAuthenticationStateProvider.SetTokenAsync(respuestaAutenticacion.Token);

                // Esperar un momento para que el estado se actualice
                await Task.Delay(100);

                // Verificar autenticación después
                var authState = await customAuthenticationStateProvider.GetAuthenticationStateAsync();
                var isAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;

                Console.WriteLine($"🔍 Estado después del login: {isAuthenticated}");

                if (isAuthenticated)
                {
                    var userName = authState.User.FindFirst("nombre")?.Value ??
                                   authState.User.Identity?.Name ??
                                   "Usuario";

                    Console.WriteLine($"👤 Usuario autenticado: {userName}");
                    Snackbar.Add($"¡Bienvenido, {userName}!", Severity.Success);

                    isUserAuthenticated = true;
                    StateHasChanged();

                    await Task.Delay(500);
                    NavigationManager.NavigateTo("/", replace: true);
                }
                else
                {
                    errorMessage = "Error de autenticación. Por favor, intente nuevamente.";
                    Snackbar.Add(errorMessage, Severity.Error);
                    await customAuthenticationStateProvider.LogoutAsync();
                }
            }
            else
            {
                errorMessage = respuestaAutenticacion.Error ?? "Credenciales incorrectas.";
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error durante inicio de sesión");
            Console.WriteLine($"❌ Error en HandleLogin: {ex.Message}");
            errorMessage = "Ocurrió un error inesperado. Intente nuevamente.";
            Snackbar.Add(errorMessage, Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        // Aquí podrías limpiar suscripciones si las tuvieras
    }
}
