@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using ProyectoFarmaVita.Models
@using ProyectoFarmaVita.Services.LoginServices
@inject ILoginService LoginService
@inject NavigationManager NavigationManager
@inject ILogger<Login> logger
@inject ISnackbar Snackbar
@inject CustomAuthenticationStateProvider customAuthenticationStateProvider

<PageTitle>FarmaVita - Iniciar Sesión</PageTitle>

<div class="login-page-container">
    <div class="login-form-container">
        <div class="login-background">
            <div class="content-wrapper">
                <div class="welcome-side">
                    <!-- CONTENIDO DE BIENVENIDA -->
                </div>
                <div class="login-side">
                    <div class="login-form">
                        <h2>Iniciar Sesión</h2>
                        <p class="login-subtitle">Accede a tu cuenta del sistema</p>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
                        }

                        <EditForm Model="@credencialesUsuario" OnValidSubmit="@HandleLogin">
                            <DataAnnotationsValidator />

                            <MudTextField Label="Correo Electrónico"
                                          @bind-Value="credencialesUsuario.Email"
                                          For="@(() => credencialesUsuario.Email)"
                                          Required="true"
                                          Variant="Variant.Outlined"
                                          FullWidth="true"
                                          Class="mb-3"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Email" />

                            <MudTextField Label="Contraseña"
                                          @bind-Value="credencialesUsuario.Password"
                                          For="@(() => credencialesUsuario.Password)"
                                          InputType="@passwordInput"
                                          Required="true"
                                          Variant="Variant.Outlined"
                                          FullWidth="true"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@(passwordVisible? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                          OnAdornmentClick="PasswordVisibility" />

                            <MudButton ButtonType="ButtonType.Submit"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       FullWidth="true"
                                       Size="Size.Large"
                                       Class="iniciar-sesion-button"
                                       Disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                    <span class="ml-2">Iniciando sesión...</span>
                                }
                                else
                                {
                                    <i class="fas fa-sign-in-alt mr-2"></i>
                                    <span>Iniciar Sesión</span>
                                }
                            </MudButton>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CredencialesUsuario credencialesUsuario = new CredencialesUsuario();
    private string errorMessage = string.Empty;
    private bool passwordVisible = false;
    private InputType passwordInput = InputType.Password;
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Inicializar el AuthenticationStateProvider
                await customAuthenticationStateProvider.InitializeAsync();

                var authState = await customAuthenticationStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity?.IsAuthenticated == true)
                {
                    NavigationManager.NavigateTo("/");
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error inicializando authentication provider");
            }
        }
    }

    private void PasswordVisibility()
    {
        passwordVisible = !passwordVisible;
        passwordInput = passwordVisible ? InputType.Text : InputType.Password;
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var respuestaAutenticacion = await LoginService.Login(credencialesUsuario);

            if (!string.IsNullOrEmpty(respuestaAutenticacion.Token))
            {
                // Guardar token y actualizar ClaimsPrincipal
                await customAuthenticationStateProvider.SetTokenAsync(respuestaAutenticacion.Token);

                var authState = await customAuthenticationStateProvider.GetAuthenticationStateAsync();
                var userName = authState.User.Identity?.Name ?? "Usuario";

                Snackbar.Add($"¡Bienvenido, {userName}!", Severity.Success);

                // Redirigir al dashboard
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = respuestaAutenticacion.Error ?? "Credenciales incorrectas.";
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error durante inicio de sesión");
            errorMessage = "Ocurrió un error inesperado. Intente nuevamente.";
            Snackbar.Add(errorMessage, Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
