@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CustomAuthenticationStateProvider AuthStateProvider
@attribute [Authorize]
@implements IDisposable

<MudNavMenu Style="background-color: white;">

	<!-- Dashboard/Home -->
	<AuthorizeView>
		<Authorized>
			<MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
		</Authorized>
	</AuthorizeView>

	<!-- Gestión de Personas -->
	<AuthorizeView Roles="Administrador,Gerente">
		<MudNavGroup Title="Gestión de Personas" Icon="@Icons.Material.Filled.Group" Expanded="false">
			<MudNavLink Href="personas" Icon="@Icons.Material.Filled.People">Usuarios</MudNavLink>
			<MudNavLink Href="estadocivil" Icon="@Icons.Material.Filled.Favorite">Estado Civil</MudNavLink>
			<MudNavLink Href="Genero" Icon="@Icons.Material.Filled.Wc">Género</MudNavLink>
		</MudNavGroup>
	</AuthorizeView>

	<!-- Gestión Laboral -->
	<AuthorizeView Roles="Administrador,Gerente">
		<MudNavGroup Title="Gestión Laboral" Icon="@Icons.Material.Filled.Schedule" Expanded="false">
			<MudNavLink Href="turnotrabajo" Icon="@Icons.Material.Filled.AccessTime">Turno Trabajo</MudNavLink>
			<MudNavLink Href="asignacion-turno" Icon="@Icons.Material.Filled.AssignmentTurnedIn">Asignación Turno</MudNavLink>
		</MudNavGroup>
	</AuthorizeView>

	<!-- Ubicación Geográfica -->
	<AuthorizeView Roles="Administrador,Gerente">
		<MudNavGroup Title="Ubicación Geográfica" Icon="@Icons.Material.Filled.LocationOn" Expanded="false">
			<MudNavLink Href="sucursal" Icon="@Icons.Material.Filled.Business">Sucursales</MudNavLink>
			<MudNavLink Href="departamento" Icon="@Icons.Material.Filled.Map">Departamento</MudNavLink>
			<MudNavLink Href="municipio" Icon="@Icons.Material.Filled.LocationCity">Municipio</MudNavLink>
		</MudNavGroup>
	</AuthorizeView>

	<!-- Gestión de Productos -->
	<AuthorizeView Roles="Administrador,Gerente,Farmaceuta">
		<MudNavGroup Title="Gestión de Productos" Icon="@Icons.Material.Filled.Medication" Expanded="false">
			<MudNavLink Href="categoria" Icon="@Icons.Material.Filled.Category">Categorías</MudNavLink>
			<MudNavLink Href="proveedor" Icon="@Icons.Material.Filled.LocalShipping">Proveedores</MudNavLink>
			<MudNavLink Href="producto" Icon="@Icons.Material.Filled.Healing">Productos</MudNavLink>
		</MudNavGroup>
	</AuthorizeView>

	<!-- Gestión de Inventarios -->
	<AuthorizeView>
		<MudNavGroup Title="Gestión de Inventarios" Icon="@Icons.Material.Filled.Inventory" Expanded="false">
			<MudNavLink Href="inventario" Icon="@Icons.Material.Filled.Warehouse">Inventarios</MudNavLink>
		</MudNavGroup>
	</AuthorizeView>

	<!-- Ventas -->
	<AuthorizeView Roles="Farmaceuta,Cajero,Vendedor">
		<MudNavGroup Title="Ventas" Icon="@Icons.Material.Filled.ShoppingCart" Expanded="false">
			<MudNavLink Href="ventas" Icon="@Icons.Material.Filled.PointOfSale">Realizar Venta</MudNavLink>
			<MudNavLink Href="historial-ventas" Icon="@Icons.Material.Filled.History">Historial de Ventas</MudNavLink>
		</MudNavGroup>
	</AuthorizeView>

	<!-- Reportes -->
	<AuthorizeView Roles="Administrador,Gerente">
		<MudNavGroup Title="Reportes" Icon="@Icons.Material.Filled.Assessment" Expanded="false">
			<MudNavLink Href="reporte-ventas" Icon="@Icons.Material.Filled.BarChart">Reporte de Ventas</MudNavLink>
			<MudNavLink Href="reporte-inventario" Icon="@Icons.Material.Filled.Inventory2">Reporte de Inventario</MudNavLink>
			<MudNavLink Href="reporte-usuarios" Icon="@Icons.Material.Filled.PeopleAlt">Reporte de Usuarios</MudNavLink>
		</MudNavGroup>
	</AuthorizeView>

</MudNavMenu>

@code {
	private string _nombreUsuario = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await ActualizarDatosUsuario();

		// Suscribirse a cambios de autenticación
		AuthStateProvider.AuthenticationStateChanged += AuthenticationStateChangedHandler;
	}

	private async Task ActualizarDatosUsuario()
	{
		try
		{
			AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
			ClaimsPrincipal user = authState?.User;

			if (user != null && user.Identity != null && user.Identity.IsAuthenticated)
			{
				_nombreUsuario = user.Claims
					.FirstOrDefault(claim => claim.Type == "nombre")?.Value ?? "Usuario";
			}
			else
			{
				_nombreUsuario = string.Empty;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error en ActualizarDatosUsuario: {ex.Message}");
			_nombreUsuario = "Usuario";
		}
	}

	private async void AuthenticationStateChangedHandler(Task<AuthenticationState> task)
	{
		try
		{
			var authState = await task;
			await ActualizarDatosUsuario();
			await InvokeAsync(() => StateHasChanged());
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error en AuthenticationStateChangedHandler: {ex.Message}");
		}
	}

	private string GetUserName()
	{
		var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
		return authState.User.FindFirst("nombre")?.Value ?? "Usuario";
	}

	private string GetUserRole()
	{
		var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
		return authState.User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value ?? "Sin rol";
	}

	public void Dispose()
	{
		// Limpiar la suscripción al desmontar el componente
		AuthStateProvider.AuthenticationStateChanged -= AuthenticationStateChangedHandler;
	}
}